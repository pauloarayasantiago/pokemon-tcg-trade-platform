{
  "original": {
    "file": "README.md",
    "frontmatter": {
      "title": "Pokemon TCG Trade Platform",
      "version": "0.7.1",
      "updated": "2023-11-18",
      "last_updated": "2023-11-18",
      "repository": "https://github.com/username/pokemontcg-trade-platform",
      "tech_stack": {
        "next.js": "14.0.0",
        "react": "18.2.0",
        "typescript": "5.3.3",
        "supabase": "2.39.3",
        "tailwind": "3.4.0",
        "shadcn_ui": "0.5.0"
      },
      "status": "In Development"
    }
  },
  "translation": {
    "title": "Plataforma de Intercambio de Cartas Pokémon TCG",
    "description": "Una aplicación web para coleccionar, gestionar e intercambiar cartas Pokémon",
    "content": "# Pokémon TCG Trade Platform\n\n<purpose>\nA web application for trading Pokémon cards with real-time pricing data, designed specifically for collectors in Costa Rica to showcase inventory and connect directly via WhatsApp. The platform acts as a centralized system for connecting buyers and sellers rather than a traditional marketplace with payment processing.\n</purpose>\n\n## System Architecture\n\n```mermaid\ngraph TD\n    subgraph Frontend\n        UI[User Interface] --> Components[React Components]\n        Components --> Hooks[Custom Hooks]\n        Hooks --> Services[Frontend Services]\n    end\n\n    subgraph Backend\n        API[Next.js API Routes] --> Controllers[Controllers]\n        Controllers --> Services2[Backend Services]\n        Services2 --> DBAccess[Database Access Layer]\n    end\n\n    subgraph \"External Services\"\n        PokemonTCG[Pokémon TCG API]\n        WhatsApp[WhatsApp Business API]\n        Supabase[Supabase Backend]\n    end\n\n    subgraph \"Storage & Authentication\"\n        Auth[Authentication]\n        Database[(Database)]\n        Storage[File Storage]\n    end\n\n    Services --> API\n    DBAccess --> Supabase\n    Services2 --> PokemonTCG\n    Services2 --> WhatsApp\n    Supabase --- Auth\n    Supabase --- Database\n    Supabase --- Storage\n\n    style Frontend fill:#f9f9ff,stroke:#9999ff,stroke-width:2px\n    style Backend fill:#f9fff9,stroke:#99ff99,stroke-width:2px\n    style \"External Services\" fill:#fff9f9,stroke:#ff9999,stroke-width:2px\n    style \"Storage & Authentication\" fill:#ffffd0,stroke:#ffff00,stroke-width:2px\n```\n\n## Project Status\n\n<status>\nCurrently in Phase 5: Codebase Cleanup & Optimization\n- Consolidation of testing functionality into unified admin dashboard\n- Simplified API endpoint structure\n- Removal of deprecated code and test pages\n- Enhanced UI components with shadcn/ui integration\n- Advanced card browser with filtering and sorting capabilities\n- Improved card image rendering with robust error handling and fallbacks\n- Fixed Tailwind CSS configuration for proper custom utility class recognition\n</status>\n\n## Features\n\n<features>\n- Admin dashboard for system monitoring and management\n- Real-time card price tracking from multiple sources\n- Automated card data synchronization with Pokémon TCG API\n- Database-driven card information with TypeScript type safety\n- Interactive card search and filtering\n- Price update scheduling and monitoring\n- Data validation tools and quality assurance\n- Advanced card browser with set filtering, rarity filtering, and price range filtering\n- Sortable card listings with pagination support\n- Set distribution analytics and visualization\n- Flexible card viewing with table/grid views\n- Color-coded price freshness indicators\n- Enhanced filtering by type, generation, and card era\n- Robust card image rendering with error handling and appropriate fallbacks\n- WhatsApp integration for direct communication between collectors\n- User profiles with collection management\n</features>\n\n## Tech Stack\n\n<tech_stack>\n- **Framework**: Next.js 14 (App Router)\n- **Styling**: Tailwind CSS & shadcn/ui\n- **Database**: PostgreSQL via Supabase\n- **Type Safety**: TypeScript\n- **Authentication**: Supabase Auth with Phone/SMS verification using Twilio\n- **Deployment**: Vercel\n</tech_stack>\n\n## API Endpoints\n\n<api_endpoints>\nThe application provides the following API endpoints:\n\n- `/api/supabase` - Database health check and statistics\n- `/api/pokemon-tcg` - Pokémon TCG API integration for card syncing\n- `/api/price-update` - Price update service management\n- `/api/card-search` - Advanced card search functionality\n- `/api/data-validation` - Card data validation utilities\n- `/api/price-schedule` - Price update scheduling\n- `/api/admin/cards` - Admin card browsing and management API\n- `/api/users` - User profile management\n- `/api/collections` - User collection management\n- `/api/inventory` - Trading inventory management\n- `/api/wishlist` - User wishlist management\n- `/api/delivery` - Delivery store network data\n</api_endpoints>\n\n## Application Pages\n\n<application_pages>\n- `/` - Updated main landing page: A simplified module with navigation buttons to the Inventory System and Admin Dashboard, a ThemeSwitch in the top-right corner, and a footer indicating a development build.\n- `/admin/dashboard` - Main admin dashboard with monitoring and management tools\n  - Overview tab - System health and statistics\n  - Cards tab - Card database management and syncing\n  - Prices tab - Price update monitoring and triggering\n  - Sets tab - Set information and statistics\n  - Testing tab - Data validation and quality assurance\n  - Logs tab - System logs and activity monitoring\n- `/admin/card-browser` - Advanced card browser with filtering and sorting capabilities\n  - Search by card name\n  - Filter by set, rarity, type, generation, era and price range\n  - Sort by name, set, price, or update date\n  - Pagination for large result sets\n  - Table and grid view options\n  - Set distribution analytics and visualization\n  - Color-coded freshness indicators for price data\n  - Robust image rendering with fallbacks for missing or broken images\n- `/profile/[slug]` - User profile page showing their collection and trading inventory\n- `/collections` - Personal collection management interface\n- `/trade` - Trading inventory management interface\n- `/search` - Advanced card search interface for users\n- `/wishlist` - User wishlist management interface\n</application_pages>\n\n## Getting Started\n\n<installation_steps>\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/username/pokemontcg-trade-platform.git\n   cd pokemontcg-trade-platform\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Set up environment variables:\n   ```bash\n   cp .env.example .env.local\n   ```\n\n4. Start the development server:\n   ```bash\n   npm run dev\n   ```\n</installation_steps>\n\n## Environment Variables\n\n<environment_variables>\n- `NEXT_PUBLIC_SUPABASE_URL` - Your Supabase project URL\n- `NEXT_PUBLIC_SUPABASE_ANON_KEY` - Your Supabase anonymous key\n- `SUPABASE_SERVICE_ROLE_KEY` - Supabase service role key (for admin functions)\n- `POKEMON_TCG_API_KEY` - API key for the Pokémon TCG API\n- `NEXT_PUBLIC_SITE_URL` - Public URL of your site\n- `TWILIO_ACCOUNT_SID` - Twilio account SID for SMS verification\n- `TWILIO_AUTH_TOKEN` - Twilio authentication token\n- `TWILIO_PHONE_NUMBER` - Twilio phone number for sending SMS\n</environment_variables>\n\n## Directory Structure\n\n<directory_structure>\n- `src/app/` - Next.js application routes and pages\n  - `api/` - API route handlers\n  - `admin/` - Admin interface components\n  - `profile/` - User profile pages\n  - `collections/` - Collection management pages\n  - `trade/` - Trading interface\n  - `search/` - Card search pages\n  - `wishlist/` - Wishlist management\n- `src/components/` - Reusable React components\n  - `ui/` - Base UI components from shadcn/ui\n  - `providers/` - Context providers\n  - `cards/` - Card-related components\n  - `forms/` - Form components\n  - `layouts/` - Layout components\n  - `shared/` - Shared utility components\n- `src/lib/` - Utility functions and services\n  - `services/` - API service functions\n  - `utils/` - Utility functions\n  - `types/` - TypeScript type definitions\n  - `constants/` - Application constants\n  - `hooks/` - Custom React hooks\n  - `supabase/` - Supabase client and utilities\n- `docs/` - Documentation files\n  - `api-reference.md` - API documentation\n  - `component-catalog.md` - Component documentation\n  - `enhanced-database-documentation.md` - Database documentation\n  - `card-synchronization-process.md` - Sync process documentation\n  - `inventory-management/` - Inventory management documentation\n  - `user-trading-flow.md` - Trading flow documentation\n  - `whatsapp-integration.md` - WhatsApp integration documentation\n- `public/` - Static assets\n</directory_structure>\n\n## Development Commands\n\n<development_commands>\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run start` - Start production server\n- `npm run lint` - Run ESLint\n- `npm run test` - Run Jest tests\n- `npm run type-check` - Check TypeScript types\n- `npm run sync-cards` - Sync card data from Pokémon TCG API\n- `npm run update-prices` - Update card prices\n</development_commands>\n\n## Documentation\n\n<documentation>\nComprehensive documentation is available in the `docs/` directory:\n\n- [API Reference](docs/api-reference.md)\n- [Component Catalog](docs/component-catalog.md)\n- [Database Documentation](docs/enhanced-database-documentation.md)\n- [Card Synchronization Process](docs/card-synchronization-process.md)\n- [User Trading Flow](docs/user-trading-flow.md)\n- [WhatsApp Integration](docs/whatsapp-integration.md)\n- [Inventory Management](docs/inventory-management/overview.md)\n</documentation>\n\n## Contributing\n\n<contributing>\n1. Create a feature branch\n2. Make your changes\n3. Submit a pull request\n\nPlease refer to [best-practices.md](docs/best-practices.md) for coding standards and guidelines.\n</contributing>\n\n## License\n\n<license>\nThis project is licensed under the MIT License - see the LICENSE file for details.\n</license>\n\n## Acknowledgments\n\n<acknowledgments>\n- [Pokémon TCG API](https://pokemontcg.io/) for providing card data\n- [Supabase](https://supabase.io/) for the backend infrastructure\n- [Next.js](https://nextjs.org/) for the frontend framework\n- [shadcn/ui](https://ui.shadcn.com/) for UI components\n- [Twilio](https://www.twilio.com/) for SMS verification services\n</acknowledgments>"
  }
}